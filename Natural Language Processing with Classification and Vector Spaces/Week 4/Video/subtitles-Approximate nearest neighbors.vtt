WEBVTT

1
00:00:01.004 --> 00:00:05.085
In the last video you learned
about locality sensitive hashing,

2
00:00:05.085 --> 00:00:07.990
now it is time to put all
this knowledge to use.

3
00:00:07.990 --> 00:00:12.870
You'll make an algorithm that
computes the k nearest neighbors

4
00:00:12.870 --> 00:00:15.770
much faster than brute search so far.

5
00:00:15.770 --> 00:00:17.720
We've seen that a few planes,

6
00:00:17.720 --> 00:00:21.624
such as these three can divide
the vector space into regions.

7
00:00:21.624 --> 00:00:25.219
But are these planes the best way
to divide up the vector space?

8
00:00:25.219 --> 00:00:29.180
What if instead,
you divided the vector space like this?

9
00:00:29.180 --> 00:00:30.956
In fact, you can't know for

10
00:00:30.956 --> 00:00:35.323
sure which sets of planes is the best
way to divide up the vector space.

11
00:00:35.323 --> 00:00:38.741
So why not create multiple
sets of random planes.

12
00:00:38.741 --> 00:00:43.639
So that you can divide up the vector
space into multiple independent sets of

13
00:00:43.639 --> 00:00:44.581
hash tables.

14
00:00:44.581 --> 00:00:49.035
You can think of it like creating
multiple copies of the universe or

15
00:00:49.035 --> 00:00:50.951
a multiverse, if you will.

16
00:00:50.951 --> 00:00:55.136
You can make use of all these
different sets of random planes,

17
00:00:55.136 --> 00:00:59.901
in order to help us find a good sets
of friendly neighborhood vectors.

18
00:00:59.901 --> 00:01:05.038
I mean, a set of k nearest neighbors.

19
00:01:05.038 --> 00:01:09.749
So back to our multiple sets of random
planes, over here for instance,

20
00:01:09.749 --> 00:01:12.115
let's say you have a vector space.

21
00:01:12.115 --> 00:01:17.078
And this magenta dot in the middle
represents the transformation of

22
00:01:17.078 --> 00:01:20.220
an English word into a French word vector.

23
00:01:20.220 --> 00:01:24.640
You're trying to find other French
word vectors that may be similar, so

24
00:01:24.640 --> 00:01:26.964
maybe one universe of random planes.

25
00:01:26.964 --> 00:01:30.426
Helped us to determine that
this magenta vector and

26
00:01:30.426 --> 00:01:34.704
these green vectors are all
assigned to the same hash pockets.

27
00:01:34.704 --> 00:01:39.390
Another entirely different sets of
random planes, helped us determine.

28
00:01:39.390 --> 00:01:44.377
That these blue vectors are in the same
hash pockets as the red vector.

29
00:01:44.377 --> 00:01:48.889
A third set of random planes,
helped us determine that these orange

30
00:01:48.889 --> 00:01:52.864
vectors are in the same hash
pockets as the magenta vector.

31
00:01:52.864 --> 00:01:57.267
By using multiple sets of random
planes for locality sensitive hashing.

32
00:01:57.267 --> 00:02:01.269
You have a more robust way of
searching the vector space, for

33
00:02:01.269 --> 00:02:05.997
a set of vectors that are possible
candidates to be nearest neighbors.

34
00:02:05.997 --> 00:02:09.261
This is called approximate
nearest neighbors,

35
00:02:09.261 --> 00:02:14.523
because you're not searching the entire
vector space but just a subset of it.

36
00:02:14.523 --> 00:02:17.775
So it's not the absolute
k nearest neighbors but

37
00:02:17.775 --> 00:02:20.956
it's approximately the k
nearest neighbors.

38
00:02:20.956 --> 00:02:25.355
You sacrifice some precision in order
to gain efficiency in your search, so

39
00:02:25.355 --> 00:02:28.391
let's see how to make a set
of random planes in code.

40
00:02:28.391 --> 00:02:31.365
Assuming that your word vectors
have two dimensions and

41
00:02:31.365 --> 00:02:33.648
you want to generate three random planes.

42
00:02:33.648 --> 00:02:40.389
You'll use np.random.normal to generate
a matrix of three rows and two columns.

43
00:02:40.389 --> 00:02:43.874
As you see here,
you'll create a vector v and for

44
00:02:43.874 --> 00:02:48.475
each random plane, see which side
of the plane the vector is on.

45
00:02:48.475 --> 00:02:52.088
So you'll find out whether
the vector v is on the positive or

46
00:02:52.088 --> 00:02:54.844
negative side of each
of these three planes.

47
00:02:54.844 --> 00:02:59.543
Notice that instead of using a for
loop to work on one plane at a time,

48
00:02:59.543 --> 00:03:02.434
you can use np dot,
to do this in one step.

49
00:03:02.434 --> 00:03:06.946
Let's call the function,
he result is that vector v is on

50
00:03:06.946 --> 00:03:11.186
the positive side of each
of the three random planes.

51
00:03:11.186 --> 00:03:14.640
You've already seen how to combine
these intermediate hash values,

52
00:03:14.640 --> 00:03:15.935
into a single hash value.

53
00:03:15.935 --> 00:03:19.601
But please do check out
the lecture notebook,

54
00:03:19.601 --> 00:03:23.553
to see all the code and
to practice this last step.

55
00:03:23.553 --> 00:03:26.109
As you see, locality sensitive hashing,

56
00:03:26.109 --> 00:03:30.514
allows two compute k nearest neighbors,
much faster than naive search.

57
00:03:30.514 --> 00:03:34.988
This powerful tool can be used for
many tasks related to r vectors and

58
00:03:34.988 --> 00:03:39.161
I will show you how it can be
applied to search in the next video.