WEBVTT

1
00:00:00.335 --> 00:00:05.124
Welcome, in this video I will teach
you about dynamic programming,

2
00:00:05.124 --> 00:00:07.363
we will go through one example.

3
00:00:07.363 --> 00:00:09.373
But once you understand that,

4
00:00:09.373 --> 00:00:13.252
you'll be able to apply dynamic
programming to anything.

5
00:00:13.252 --> 00:00:16.204
So you start by laying out
the problem like this,

6
00:00:16.204 --> 00:00:19.959
where you have the source wordplay
here down the left column.

7
00:00:19.959 --> 00:00:24.621
And then, the targets were to transform
into stay along the top row here and

8
00:00:24.621 --> 00:00:26.551
an empty string placeholder.

9
00:00:26.551 --> 00:00:31.465
Represented by the hashtag symbol
at the start of each string here.

10
00:00:31.465 --> 00:00:34.715
The reason for this,
will make more sense in the steps ahead.

11
00:00:34.715 --> 00:00:37.571
There are also some row and
column in this easier,

12
00:00:37.571 --> 00:00:40.368
just to make things a bit
easier to follow along.

13
00:00:40.368 --> 00:00:43.844
Now, the goal is to fill
out this distance matrix D.

14
00:00:43.844 --> 00:00:48.136
Such that the element D 2, 3 for example,

15
00:00:48.136 --> 00:00:53.016
refers to the minimum at
a distance from pl to sta.

16
00:00:53.016 --> 00:00:55.742
Which is the first two
letters of the word play,

17
00:00:55.742 --> 00:00:58.754
to the first three letters
of the target words stay.

18
00:00:58.754 --> 00:01:04.080
Or more generally for any element in
the matrix by using this formula for

19
00:01:04.080 --> 00:01:06.585
the element at row i and column j.

20
00:01:06.585 --> 00:01:10.999
Being i equals two and j equal three,

21
00:01:10.999 --> 00:01:14.284
in the example, pl to sta.

22
00:01:14.284 --> 00:01:17.180
From the previous few slides, you know,

23
00:01:17.180 --> 00:01:20.500
each D of ij will be
the minimum at the distance.

24
00:01:20.500 --> 00:01:24.713
Between the beginning of
the source word to index i at

25
00:01:24.713 --> 00:01:28.363
the beginning of the targets
word to index j.

26
00:01:28.363 --> 00:01:33.186
So that's for a source of length m and
a target of length n,

27
00:01:33.186 --> 00:01:37.031
when you get to the bottom
right corner D of mn.

28
00:01:37.031 --> 00:01:40.507
You have the minimum edit
distance between the two strings.

29
00:01:40.507 --> 00:01:45.129
You will compute this from the shortest
sub strength to the full strength that is.

30
00:01:45.129 --> 00:01:48.945
Starting with the shortest string
in the top left corner and

31
00:01:48.945 --> 00:01:51.016
working down then to the right.

32
00:01:51.016 --> 00:01:56.266
The intuition is that you can build upon
each sub problem by combining solutions.

33
00:01:56.266 --> 00:02:00.903
For example finding the minimum edit
distance between two letters is easy.

34
00:02:00.903 --> 00:02:04.200
Then, you increase the problem
size one letter at a time,

35
00:02:04.200 --> 00:02:06.230
building on what you already know.

36
00:02:06.230 --> 00:02:09.667
If this seems confusing at first,
don't worry, it is but

37
00:02:09.667 --> 00:02:13.537
it will start to make more sense
as you work through the examples.

38
00:02:13.537 --> 00:02:17.742
But first before you get started,
recall the cost for

39
00:02:17.742 --> 00:02:22.334
each edit, one for insert and
delete and two for replace.

40
00:02:22.334 --> 00:02:26.905
Okay, so the first step is to
transform the source empty string,

41
00:02:26.905 --> 00:02:29.409
enter the target's empty string.

42
00:02:29.409 --> 00:02:32.522
The edit distance between
the source empty string and

43
00:02:32.522 --> 00:02:34.467
the target empty string is zero.

44
00:02:34.467 --> 00:02:39.319
There is no formula here,
it's just a special case so far, so good.

45
00:02:39.319 --> 00:02:44.330
Okay, to change nothing to nothing,
you do nothing, good.

46
00:02:44.330 --> 00:02:47.745
Then you can move on to
p to empty string and

47
00:02:47.745 --> 00:02:53.120
you can do this where they do it at
its operation at the cost of one.

48
00:02:53.120 --> 00:02:55.183
Then empty string to s,

49
00:02:55.183 --> 00:03:00.972
which you can do with an insert at
this operation at the cost of one.

50
00:03:00.972 --> 00:03:02.236
Now look at b two s,

51
00:03:02.236 --> 00:03:06.588
there is more than one possible
way to make this transformation.

52
00:03:06.588 --> 00:03:12.449
Each possible sequence of edits is
known as a path starting with b,

53
00:03:12.449 --> 00:03:15.598
you can insert s on the end to get ps.

54
00:03:15.598 --> 00:03:18.974
Then though is b from
the beginning to get s,

55
00:03:18.974 --> 00:03:22.451
this has a cost of one inserts and
one delete.

56
00:03:22.451 --> 00:03:23.604
At this point,

57
00:03:23.604 --> 00:03:29.111
notice that you've already calculated
the cost of inserting a letter s.

58
00:03:29.111 --> 00:03:31.883
It's found in this red box here on top,

59
00:03:31.883 --> 00:03:35.587
when you calculate how to
get from empty string to s.

60
00:03:35.587 --> 00:03:39.360
So you actually just calculate
the cost of deleting the p and

61
00:03:39.360 --> 00:03:43.224
added onto the cost that you've
stored in the red box above.

62
00:03:43.224 --> 00:03:50.146
This is one plus one equals two, in
the second possible path, starting with p.

63
00:03:50.146 --> 00:03:54.732
You can delete b to get hashtag and
then insert s to get s,

64
00:03:54.732 --> 00:04:00.792
notice again that you've already
calculated the cost of the deleting p.

65
00:04:00.792 --> 00:04:03.133
In this blue box in the left,

66
00:04:03.133 --> 00:04:08.611
the blue box is the cost of going
from p to hashtag by the deleting p.

67
00:04:08.611 --> 00:04:11.508
So you can calculate
the cost of inserting p and

68
00:04:11.508 --> 00:04:15.531
added to the cost that you've
stored in the blue box on the left.

69
00:04:15.531 --> 00:04:22.089
This is one plus one equals two,
the third way is to replace p with s,

70
00:04:22.089 --> 00:04:27.283
so that you go from p to s and
one step at the cost of two.

71
00:04:27.283 --> 00:04:32.261
For replacement, visually you can
think of going from this green box and

72
00:04:32.261 --> 00:04:34.960
jumping directly into the orange box.

73
00:04:34.960 --> 00:04:39.689
The green box is the cost of not
doing any edit which is zero,

74
00:04:39.689 --> 00:04:44.528
a replacement has a cost of two,
so zero plus two equals two.

75
00:04:44.528 --> 00:04:50.552
Then, you take the minimum of all three of
these paths, which is a two in this case.

76
00:04:50.552 --> 00:04:52.943
Then place that value in the cell,

77
00:04:52.943 --> 00:04:56.576
which gives you the minimum
at a distance from p to s.

78
00:04:56.576 --> 00:04:58.749
So working off what you've
already filled out,

79
00:04:58.749 --> 00:05:00.554
you'll notice that to fill in the cell.

80
00:05:00.554 --> 00:05:04.976
You need to know the cell above,
to the left and adjacent upper left,

81
00:05:04.976 --> 00:05:07.275
shown in red, blue and green here.

82
00:05:07.275 --> 00:05:11.126
In doing so, you can benefit from
some calculations already performed.

83
00:05:11.126 --> 00:05:15.900
Soon, I'll show you how to generalize
this in a formula to fill out the rest of

84
00:05:15.900 --> 00:05:16.713
the matrix.

85
00:05:16.713 --> 00:05:20.755
But first, I will show you how to fill
out the first column and the first row.

86
00:05:20.755 --> 00:05:24.143
So that every cell remaining
has its own red, blue and

87
00:05:24.143 --> 00:05:26.788
green cells available as dependencies.

88
00:05:26.788 --> 00:05:28.804
This is what's coming up next.

89
00:05:30.123 --> 00:05:34.530
In this video, you learned about
the cost of each operation,

90
00:05:34.530 --> 00:05:38.533
insert and deleting is one and
then, replacing is two.

91
00:05:38.533 --> 00:05:42.428
You also saw how you can populate
your table, in the next video,

92
00:05:42.428 --> 00:05:46.050
you will learn about a much
faster way to populate your table