WEBVTT

1
00:00:01.040 --> 00:00:02.385
Good to see you again.

2
00:00:02.385 --> 00:00:06.527
As promised in the previous video I
will now show you how to calculate

3
00:00:06.527 --> 00:00:10.240
the probabilities of each
possible correct word.

4
00:00:10.240 --> 00:00:14.589
&gt;&gt; Now that you have a list of actual
words you can move on to step four,

5
00:00:14.589 --> 00:00:17.540
calculate worth probabilities.

6
00:00:17.540 --> 00:00:20.614
The final step is to calculate
word probabilities and

7
00:00:20.614 --> 00:00:23.354
find the most likely
word from the candidates.

8
00:00:23.354 --> 00:00:26.760
For example the word and
is more common than the word and

9
00:00:26.760 --> 00:00:30.140
in any given body of text
also called a corpus.

10
00:00:30.140 --> 00:00:35.024
This is how auto correct knows which were
to substitute for the incorrect one.

11
00:00:35.024 --> 00:00:38.569
To understand this better,
look at this example sentence.

12
00:00:38.569 --> 00:00:40.621
I am happy because I am learning.

13
00:00:40.621 --> 00:00:45.281
To calculate the probability of a word in
the sentence you need to first calculate

14
00:00:45.281 --> 00:00:47.340
the word frequencies.

15
00:00:47.340 --> 00:00:52.309
In addition you want to count the total
number of words in the body of text or

16
00:00:52.309 --> 00:00:53.640
corpus.

17
00:00:53.640 --> 00:00:56.640
Normally a corpus would be much larger.

18
00:00:56.640 --> 00:01:00.617
Imagine every issue of a certain
magazine ever published or

19
00:01:00.617 --> 00:01:02.690
all of the harry potter books.

20
00:01:02.690 --> 00:01:07.427
To keep this example as simple as
possible the corpus here is defined as

21
00:01:07.427 --> 00:01:08.807
this one sentence.

22
00:01:08.807 --> 00:01:12.140
For example, the word I appears twice.

23
00:01:12.140 --> 00:01:14.278
The word am appears twice also.

24
00:01:14.278 --> 00:01:17.540
And so on for the rest of the words.

25
00:01:17.540 --> 00:01:21.240
The total number of words
in this corpus is seven.

26
00:01:21.240 --> 00:01:25.320
The probability of any word within
the corpus is the number of times the word

27
00:01:25.320 --> 00:01:28.540
appears divided by
the total number of words.

28
00:01:28.540 --> 00:01:34.040
For example the word am appears twice and
the size of the corpus is seven.

29
00:01:34.040 --> 00:01:39.183
For auto correct, you find the word
candidate with the highest probability and

30
00:01:39.183 --> 00:01:43.340
choose that word as the replacements and
that's it.

31
00:01:43.340 --> 00:01:47.540
In summary to implement auto,
correct you did the following.

32
00:01:47.540 --> 00:01:53.970
You entered a word to correct for
example the misspelled word deah.

33
00:01:53.970 --> 00:01:58.399
Then follow the four steps inside the auto
correct model to get its replacement.

34
00:01:58.399 --> 00:02:03.240
You identified there as being misspelled
by checking it against known words.

35
00:02:03.240 --> 00:02:07.940
Then you made a list of all
the strings that are n edits away.

36
00:02:07.940 --> 00:02:11.994
You filter this list of strengths to
include only the ones that are actual

37
00:02:11.994 --> 00:02:14.640
words in a given dictionary.

38
00:02:14.640 --> 00:02:19.340
And then you calculate that the word
probabilities for each of these words.

39
00:02:19.340 --> 00:02:24.267
You selected the word with the highest
probability as the autocorrect replacement

40
00:02:24.267 --> 00:02:25.840
and that was it.

41
00:02:25.840 --> 00:02:27.240
That's a lot to cover.

42
00:02:27.240 --> 00:02:30.728
But breaking it down step by step
gives you a good intuition for

43
00:02:30.728 --> 00:02:33.140
how to implement auto correct.

44
00:02:33.140 --> 00:02:37.940
This is something that will come in very
handy for the assignment, so well done.

45
00:02:37.940 --> 00:02:40.852
Also you now understand edit and
edit distance and

46
00:02:40.852 --> 00:02:44.740
how they can be used to measure
similarity between words.

47
00:02:44.740 --> 00:02:50.060
Next, get ready to apply these concepts to
building a metric very common in NLP for

48
00:02:50.060 --> 00:02:54.161
measuring similarity between words,
strings and many more.

49
00:02:55.440 --> 00:02:58.771
&gt;&gt; You have seen the four steps
required to implement auto correct for

50
00:02:58.771 --> 00:03:01.240
this week's programming assignments.

51
00:03:01.240 --> 00:03:02.520
This is exciting.

52
00:03:02.520 --> 00:03:07.335
Now in the next video we will look at how
we can evaluate similarity between two

53
00:03:07.335 --> 00:03:11.350
strings, for example,
a word with a typo and the word without.