WEBVTT

1
00:00:00.000 --> 00:00:02.310
In this video, you are going to

2
00:00:02.310 --> 00:00:04.965
learn about hash tables
and hash functions.

3
00:00:04.965 --> 00:00:07.110
For example, imagine that you

4
00:00:07.110 --> 00:00:09.674
have a cupboard with
several drawers.

5
00:00:09.674 --> 00:00:11.835
You might want to
place similar objects

6
00:00:11.835 --> 00:00:13.200
in similar drawers.

7
00:00:13.200 --> 00:00:15.600
For example, paper
documents alone,

8
00:00:15.600 --> 00:00:17.760
keys alone, and books alone.

9
00:00:17.760 --> 00:00:21.850
In this video, we will dive
deeper into these concepts.

10
00:00:21.850 --> 00:00:24.930
Let us say you have several
data items and you want to

11
00:00:24.930 --> 00:00:27.840
group them into buckets by
some kind of similarity.

12
00:00:27.840 --> 00:00:30.270
One bucket can hold
more than one item,

13
00:00:30.270 --> 00:00:34.200
and each item is always
assigned to the same bucket.

14
00:00:34.200 --> 00:00:36.545
The results would
be these blue ovals

15
00:00:36.545 --> 00:00:38.540
end up in bucket number 1,

16
00:00:38.540 --> 00:00:41.870
these gray rectangles end
up in bucket number 2,

17
00:00:41.870 --> 00:00:45.910
and these magenta triangles
are assigned to bucket 3.

18
00:00:45.910 --> 00:00:47.990
Now, let's think about how we'd

19
00:00:47.990 --> 00:00:50.035
like to do this
with word vectors.

20
00:00:50.035 --> 00:00:51.920
First, let's assume

21
00:00:51.920 --> 00:00:54.530
that the word vectors have
just one dimension instead of

22
00:00:54.530 --> 00:00:57.020
300 dimensions so each word

23
00:00:57.020 --> 00:00:58.925
is represented by
a single number,

24
00:00:58.925 --> 00:01:02.220
such as 100, 14,

25
00:01:02.220 --> 00:01:06.345
17, 10, and 97.

26
00:01:06.345 --> 00:01:09.680
You need to find a way to
give each vector a hash value

27
00:01:09.680 --> 00:01:10.970
which is a key that tells us

28
00:01:10.970 --> 00:01:12.690
which bucket it's assigned to.

29
00:01:12.690 --> 00:01:14.270
A function that assigns

30
00:01:14.270 --> 00:01:16.675
a hash value is called
a hash function.

31
00:01:16.675 --> 00:01:18.470
In this example, here is

32
00:01:18.470 --> 00:01:21.260
a hash table which
is a set of buckets.

33
00:01:21.260 --> 00:01:23.900
In this case, the hash
table has 10 buckets.

34
00:01:23.900 --> 00:01:25.900
Notice how the word vectors

35
00:01:25.900 --> 00:01:28.460
100 and 10 are
assigned to bucket 0.

36
00:01:28.460 --> 00:01:31.880
The word vector 14 is
assigned to bucket 4 and

37
00:01:31.880 --> 00:01:36.425
the word vectors 17 and 97
are assigned to bucket 7.

38
00:01:36.425 --> 00:01:38.495
Do you notice a pattern?

39
00:01:38.495 --> 00:01:41.480
This formula here is the
hash function that's being

40
00:01:41.480 --> 00:01:43.190
used to assign the word vectors

41
00:01:43.190 --> 00:01:44.885
to their respective buckets.

42
00:01:44.885 --> 00:01:46.760
The modulo operator takes

43
00:01:46.760 --> 00:01:48.995
the remainder after
dividing by 10.

44
00:01:48.995 --> 00:01:51.170
The remainder is
the hash value that

45
00:01:51.170 --> 00:01:53.380
tells us where the word
vector should be stored.

46
00:01:53.380 --> 00:01:56.070
For example, 14 divided by

47
00:01:56.070 --> 00:01:59.985
10 has a remainder of 4
so it goes to bucket 4.

48
00:01:59.985 --> 00:02:03.210
Now, let's build a basic
hash tabling code.

49
00:02:03.210 --> 00:02:04.730
Here's a definition of

50
00:02:04.730 --> 00:02:07.010
a function that takes
in a list of values.

51
00:02:07.010 --> 00:02:10.160
You can think of each value
as a one-dimensional vector.

52
00:02:10.160 --> 00:02:13.060
It also takes in the
number of buckets.

53
00:02:13.060 --> 00:02:17.455
Define the hash function
used in the modulo operator.

54
00:02:17.455 --> 00:02:19.725
Then you create the hash table.

55
00:02:19.725 --> 00:02:22.790
Notice that this is a
dictionary comprehension.

56
00:02:22.790 --> 00:02:25.370
The key is an integer
and the value is

57
00:02:25.370 --> 00:02:29.465
an empty list which you'll
use as a bucket for storage.

58
00:02:29.465 --> 00:02:31.170
For each word vector,

59
00:02:31.170 --> 00:02:32.945
calculate its hash value,

60
00:02:32.945 --> 00:02:35.405
then append it to the
appropriate list.

61
00:02:35.405 --> 00:02:37.820
The hash table that is
returned can be seen in

62
00:02:37.820 --> 00:02:40.445
the notebook that goes
with this lecture.

63
00:02:40.445 --> 00:02:42.860
You'll see that the
hash table is the

64
00:02:42.860 --> 00:02:45.590
same as what you saw
in the previous slide.

65
00:02:45.590 --> 00:02:49.040
Now let's take another look
at this basic hash table.

66
00:02:49.040 --> 00:02:51.830
Recall that your
original goal was to put

67
00:02:51.830 --> 00:02:54.800
similar word vectors
into the same bucket.

68
00:02:54.800 --> 00:02:57.560
But here, it doesn't
look like numbers

69
00:02:57.560 --> 00:03:00.475
that are close to each other
are in the same bucket.

70
00:03:00.475 --> 00:03:02.490
For instance, 10,

71
00:03:02.490 --> 00:03:05.780
14, and 17 are in
different buckets.

72
00:03:05.780 --> 00:03:09.290
Ideally, you want to have
a hash function that

73
00:03:09.290 --> 00:03:10.880
puts similar word vectors in

74
00:03:10.880 --> 00:03:13.100
the same buckets, like this.

75
00:03:13.100 --> 00:03:15.260
To do this, you'll need to use

76
00:03:15.260 --> 00:03:17.945
what's called
locality-sensitive hashing.

77
00:03:17.945 --> 00:03:20.525
Locality is another
word for location.

78
00:03:20.525 --> 00:03:23.410
Sensitive is another
word for caring.

79
00:03:23.410 --> 00:03:26.180
So locality-sensitive hashing is

80
00:03:26.180 --> 00:03:27.950
a hashing method that cares very

81
00:03:27.950 --> 00:03:30.020
deeply about assigning items

82
00:03:30.020 --> 00:03:33.140
based on where they're
located in vector space.

83
00:03:33.140 --> 00:03:36.865
You'll learn about
locality-sensitive hashing next.

84
00:03:36.865 --> 00:03:39.345
You learned a lot of new terms.

85
00:03:39.345 --> 00:03:41.265
You learned about hash values,

86
00:03:41.265 --> 00:03:43.175
hash functions, and buckets.

87
00:03:43.175 --> 00:03:46.550
You have also seen the code
for how to build a hash table

88
00:03:46.550 --> 00:03:48.320
or the equivalence
of the cupboard I

89
00:03:48.320 --> 00:03:50.555
spoke about in the
intro of the video.

90
00:03:50.555 --> 00:03:51.980
In the next video,

91
00:03:51.980 --> 00:03:55.410
we will look at
locality-sensitive hashing.